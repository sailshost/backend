input AccountInput {
  email: String
  firstName: String
  lastName: String
  otp: String
}

type Container {
  createdAt: DateTime!
  id: ID!
  origin: String!
  userId: String!
  uuid: String!
}

input ContainerInput {
  origin: String!
}

scalar DateTime

input DisableTOTPInput {
  password: String!
}

input EnableTOTPInput {
  token: String!
}

type Error {
  message: String!
}

input LoginInput {
  email: String!
  otp: String
  password: String!
}

type Membership {
  team: Team!
  teamId: ID!
  userId: ID!
}

type Mutation {
  cancelTeamInvite(input: TeamInput): MutationCancelTeamInviteResult
  createTeam(input: TeamInput): MutationCreateTeamResult!
  deleteTeam(input: TeamInput): MutationDeleteTeamResult!
  disableOtp(input: DisableTOTPInput): MutationDisableOtpResult!
  edit(input: AccountInput): MutationEditResult!
  editTeam(input: TeamInput): MutationEditTeamResult!
  enableOtp(input: EnableTOTPInput): MutationEnableOtpResult!
  login(input: LoginInput): MutationLoginResult!
  passwordReset(input: PasswordInput): MutationPasswordResetResult!
  promoteTeamMember(input: TeamInput): MutationPromoteTeamMemberResult!
  signup(input: SignupInput): MutationSignupResult!
  teamInvite(input: TeamInput): MutationTeamInviteResult!
}

union MutationCancelTeamInviteResult = Error | MutationCancelTeamInviteSuccess

type MutationCancelTeamInviteSuccess {
  data: Team!
}

union MutationCreateTeamResult = Error | MutationCreateTeamSuccess

type MutationCreateTeamSuccess {
  data: Team!
}

union MutationDeleteTeamResult = Error | MutationDeleteTeamSuccess

type MutationDeleteTeamSuccess {
  data: Team!
}

union MutationDisableOtpResult = Error | MutationDisableOtpSuccess

type MutationDisableOtpSuccess {
  data: User!
}

union MutationEditResult = Error | MutationEditSuccess

type MutationEditSuccess {
  data: User!
}

union MutationEditTeamResult = Error | MutationEditTeamSuccess

type MutationEditTeamSuccess {
  data: Team!
}

union MutationEnableOtpResult = Error | MutationEnableOtpSuccess

type MutationEnableOtpSuccess {
  data: User!
}

union MutationLoginResult = Error | MutationLoginSuccess

type MutationLoginSuccess {
  data: User!
}

union MutationPasswordResetResult = Error | MutationPasswordResetSuccess

type MutationPasswordResetSuccess {
  data: User!
}

union MutationPromoteTeamMemberResult = Error | MutationPromoteTeamMemberSuccess

type MutationPromoteTeamMemberSuccess {
  data: Membership!
}

union MutationSignupResult = Error | MutationSignupSuccess

type MutationSignupSuccess {
  data: User!
}

union MutationTeamInviteResult = Error | MutationTeamInviteSuccess

type MutationTeamInviteSuccess {
  data: Team!
}

input PasswordInput {
  currentPassword: String!
  newPassword: String!
  token: String!
}

input PasswordRequestInput {
  email: String!
}

type Query {
  container: Container
  currentUser: User
  logout: User!
  passwordResetRequest(input: PasswordRequestInput): QueryPasswordResetRequestResult!
  resolveContainer(input: ContainerInput): Container
  resolveOtp: QueryResolveOtpResult!
}

union QueryPasswordResetRequestResult = Error | QueryPasswordResetRequestSuccess

type QueryPasswordResetRequestSuccess {
  data: Result!
}

union QueryResolveOtpResult = Error | QueryResolveOtpSuccess

type QueryResolveOtpSuccess {
  data: User!
}

enum Result {
  FAIL
  OK
}

input SignupInput {
  email: String!
  name: String
  password: String!
  refer: String
  teamRefer: String
  username: String!
}

type Team {
  id: ID!
  logo: String
  name: String
  slug: String
}

input TeamInput {
  email: String
  id: String
  logo: String
  name: String
  otp: String
  role: String
  slug: String
  userId: String
}

type User {
  avatar: String
  containers: [Container!]!
  createdAt: DateTime!
  firstName: String
  id: ID!
  lastName: String
  otpOnboard: String
  otpSecret: String
  roles: String
  updatedAt: DateTime!
  username: String
}
