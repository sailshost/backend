datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator giraphql {
  provider     = "prisma-giraphql-types"
  clientOutput = "@prisma/client"
  output       = "./giraphql-types.ts"
}

model User {
  id               String          @id @default(cuid())
  firstName        String?
  lastName         String?
  avatar           String?         @default("https://avatar.tobi.sh/sails.jpg")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  email            String          @unique
  code             String?
  token            String?
  password         String
  emailedCompleted Boolean         @default(false)
  userType         UserType        @default(NORMAL)
  otpSecret        String?
  otpOnboard       String?
  otpBackup        String[]
  otpType          OtpType?
  Teams            Membership[]
  Session          Session[]
  Containers       Container[]
  PasswordReset    PasswordReset[]
}

model PasswordReset {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  used      Boolean   @default(false)
  token     String
  user      User?     @relation(fields: [userId], references: [id])
  userId    String
}

model Session {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String
  ip        String
  userAgent String
  expiresAt DateTime?
  type      AuthType?
}

model Container {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String
  origin    String   @unique
  uuid      String
  snapshot  String?
  logo      String?
}

model Team {
  id      String       @id @default(cuid())
  name    String?
  slug    String?      @unique
  logo    String?
  members Membership[]
}

model Membership {
  teamId   String
  userId   String
  accepted Boolean        @default(false)
  role     PermissionType
  team     Team           @relation(fields: [teamId], references: [id])
  user     User           @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
}

enum OtpType {
  EMAIL
  GEN
}

enum AuthType {
  FULL
  OTP
}

enum UserType {
  NORMAL
  STAFF
  ADMIN
}

enum PermissionType {
  OWNER
  MEMBER
}
